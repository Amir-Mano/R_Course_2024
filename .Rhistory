temp_df <- read.csv(file.path('stroop_data',fnames[ind]))
df <- rbind(df, temp_df)
}
# organize data
df <- df |> mutate(task = ifelse(grepl("ink", condition), "ink_naming", "word_reading"))
df <- df |> mutate(congureancy = ifelse(grepl("incong", condition), "incongureant", "congureant"))
df <- df |> mutate(accuracy = ifelse(correct_response==participant_response, 1, 0))
df <- mutate(task = factor(task, levels =c("ink_naming","word_reading")))
df <- df |> mutate(task = factor(task, levels =c("ink_naming","word_reading")))
factor(df$congureancy)
factor(df$congureancy, levels =c("congureancy","incongureancy")
)
factor(df$congureancy, levels =c("congureancy","incongureancy"))
factor(df$congureancy)
factor(df$congureancy, levels =c("congureant","incongureant"))
factor(df$congureancy, levels =c("incongureant","congureant"))
labels()
labels(df <- df |> mutate(task = ifelse(grepl("ink", condition), "ink_naming", "word_reading"))
df <- df |> mutate(congureancy = ifelse(grepl("incong", condition), "incongureant", "congureant"))
df <- df |> mutate(task = ifelse(grepl("ink", condition), "ink_naming", "word_reading"))
df <- df |> mutate(congureancy = ifelse(grepl("incong", condition), "incongureant", "congureant"))
df <- df |> mutate(accuracy = ifelse(correct_response==participant_response, 1, 0))
df <- df |> mutate(task = factor(task, levels =c("ink_naming","word_reading")))
df <- df |> mutate(congureancy = factor(congureancy, levels =c("congureant","incongureant"))
)
df
df$congureancy
df$congureancy.label
labels(df$congureancy)
levels(df$congureancy)
labels(df$congureancy)
labels(df$congureancy)
levelss(df$congureancy)
levels(df$congureancy)
factor(df$congureancy)
factor(df$congureancy, levels=c(0,1))
contrasts(df$congureancy)
factor(df$congureancy, levels =c("incongureant","congureant"))
contrasts(df$congureancy)
factor(df$congureancy)
A <- factor(df$congureancy)
contrasts(A)
group <- factor(c("Control", "Treatment", "Control", "Treatment"))
contrasts(group)
contrasts(group) <- contr.treatment(2)
contrasts(group)
# Define the factor with "Control" as the reference
group1 <- factor(c("Control", "Treatment", "Control", "Treatment"),
levels = c("Control", "Treatment"))
# Set the contrasts (Treatment vs Control)
contrasts(group1) <- contr.treatment(2)
# View the contrasts
contrasts(group1)
# Define the factor with "Control" as the reference
group1 <- factor(c("Control", "Treatment", "Control", "Treatment"),
levels = c("Treatment", "Control"))
# Set the contrasts (Treatment vs Control)
contrasts(group1) <- contr.treatment(2)
# View the contrasts
contrasts(group1)
?contr.treatment(2)
contrasts(df$task) <- contr.treatment(2)
contrasts(df$task)
contrasts(df$congureancy) <- contr.treatment(2)
contrasts(df$congureancy)
# load data
fnames <- dir("stroop_data")
df = data.frame()
for (ind in c(1:length(fnames))){
temp_df <- read.csv(file.path('stroop_data',fnames[ind]))
df <- rbind(df, temp_df)
}
# organize data
df <- df |> mutate(task = ifelse(grepl("ink", condition), "ink_naming", "word_reading"))
df <- df |> mutate(congureancy = ifelse(grepl("incong", condition), "ancongureant", "congureant"))
df <- df |> mutate(accuracy = ifelse(correct_response==participant_response, 1, 0))
df <- df |> mutate(task = factor(task))
df <- df |> mutate(congureancy = factor(congureancy))
df <- df |> select(subject, block, trial, task, congureancy, accuracy, rt)
contrasts(df$task) <- contr.treatment(2)
contrasts(df$congureancy) <- contr.treatment(2)
contrasts(df$congureancy)
rm(list = ls()) #or Ctrl + Shift + F10 & Ctrl + L
rm(list = ls())
load('raw_data.rdata')
source("~/.active-rstudio-document", echo=TRUE)
?save
save('raw_data.rdata',df)
save(df, file='raw_data.RData')
source("~/.active-rstudio-document", echo=TRUE)
View(df)
unique(df$subject)
length(unique(df$subject))
omit.na
na.omit(df)
na.omit(df$rt)
df$rt
is.na(df$rt)
is.na(df$rt) or df$rt>3000 or df$rt<300
is.na(df$rt) | df$rt>3000 | df$rt<300
View(df)
View(df)
df< filter(remove_indexes)
remove_indexes <-is.na(df$rt) | df$rt>3000 | df$rt<300
df< filter(remove_indexes)
df<- df|>filter(remove_indexes)
View(df)
View(df)
rm(list = ls())
load('raw_data.rdata')
N <- length(unique(df$subject))
remove_indexes <-is.na(df$rt) | df$rt>3000 | df$rt<300
df<- df|>filter(~remove_indexes)
remove_indexes
!remove_indexes
df<- df|>filter(!remove_indexes)
View(df)
View(df)
unique(df$subject)
#### create row data ----
rm(list = ls()) #or Ctrl + Shift + F10 & Ctrl + L
library(tidyverse)
# load data
fnames <- dir("stroop_data")
df = data.frame()
for (ind in c(1:length(fnames))){
temp_df <- read.csv(file.path('stroop_data',fnames[ind]))
df <- rbind(df, temp_df)
}
unique(df$subject)
load('raw_data.rdata')
setpwd
getwd
getwd90
getwd()
setwd(HW_7)
setwd('HW_7')
load('raw_data.rdata')
unique(df$subject)
df
ratio <- c()
for (subj in unique(df$subject)){
ratio <- c(ratio, sum(df$subject==subj))
}
ratio
rm(list = ls())
load('raw_data.rdata')
N <- length(unique(df$subject))
remove_indexes <-is.na(df$rt) | df$rt>3000 | df$rt<300
df<- df|>filter(!remove_indexes)
ratio <- c()
for (subj in unique(df$subject)){
ratio <- c(ratio, sum(df$subject==subj))
}
ratio
ratio <- ratio/400
ratio
fnames <- dir("stroop_data")
df = data.frame()
for (ind in c(1:length(fnames))){
temp_df <- read.csv(file.path('stroop_data',fnames[ind]))
df <- rbind(df, temp_df)
}
df
#### create filtered data ----
rm(list = ls())
load('raw_data.rdata')
N <- length(unique(df$subject))
remove_indexes <-is.na(df$rt) | df$rt>3000 | df$rt<300
df<- df|>filter(!remove_indexes)
count_trial <- c()
for (subj in unique(df$subject)){
count_trial <- c(count_trial, sum(df$subject==subj))
}
ratio <- count_trial/400
ratio
cat('average ratio:', mean(ratio), '/n', 'sd ratio:', sd(ratio), '/n')
cat('average ratio:', mean(ratio), '\n', 'sd ratio:', sd(ratio), '\n')
df |> summarize(group_by(task,congureancy))
task.asnumeric
task.as_numeric
as.numeric(df$task)
df |> summarize(group_by(as.numeric(task))
as.numeric(df$task))
df |> summarize(group_by(task)
)
df |> summarize(task)
df |> select(task)
df |> select(task.level)
df$task.level
df$task.levels
as.numeric(task)
df |> select(as.numeric(task)==1)
df$as.numeric(task)==1
as.numeric(df$task)==1
mean(df[as.numeric(df$task)==1])
df[as.numeric(df$task)==1]
df$task
mean(df$rt[as.numeric(df$task)==1])
mean(df$rt[as.numeric(df$task)==1] & df$rt[as.numeric(df$congureancy)==1])
mean(df$rt[as.numeric(df$task)==1] & df$rt[as.numeric(df$congureancy)==2])
mean(df$rt[as.numeric(df$task)==2] & df$rt[as.numeric(df$congureancy)==1])
mean(df$rt[as.numeric(df$task)==2] & df$rt[as.numeric(df$congureancy)==2])
mean(df$rt[as.numeric(df$task)==1] & df$rt[as.numeric(df$congureancy)==1])
df$rt[as.numeric(df$congureancy)==1]
mean(df$rt[as.numeric(df$task)==1 & as.numeric(df$congureancy)==1])
mean(df$rt[as.numeric(df$task)==1 & as.numeric(df$congureancy)==1])
mean(df$rt[as.numeric(df$task)==1] & as.numeric(df$congureancy)==2])
mean(df$rt[as.numeric(df$task)==1 & as.numeric(df$congureancy)==1])
mean(df$rt[as.numeric(df$task)==1 & as.numeric(df$congureancy)==2])
mean(df$rt[as.numeric(df$task)==2 & as.numeric(df$congureancy)==1])
mean(df$rt[as.numeric(df$task)==2 & as.numeric(df$congureancy)==2])
means <- c(
mean(df$rt[as.numeric(df$task)==1 & as.numeric(df$congureancy)==1])
mean(df$rt[as.numeric(df$task)==1 & as.numeric(df$congureancy)==2])
means <- c(
mean(df$rt[as.numeric(df$task)==1 & as.numeric(df$congureancy)==1]),
mean(df$rt[as.numeric(df$task)==1 & as.numeric(df$congureancy)==2]),
mean(df$rt[as.numeric(df$task)==2 & as.numeric(df$congureancy)==1]),
mean(df$rt[as.numeric(df$task)==2 & as.numeric(df$congureancy)==2]))
means <- c(
mean(df$rt[as.numeric(df$task)==1 & as.numeric(df$congureancy)==1]),
mean(df$rt[as.numeric(df$task)==1 & as.numeric(df$congureancy)==2]),
mean(df$rt[as.numeric(df$task)==2 & as.numeric(df$congureancy)==1]),
mean(df$rt[as.numeric(df$task)==2 & as.numeric(df$congureancy)==2]))
sd <- c(
sd(df$rt[as.numeric(df$task)==1 & as.numeric(df$congureancy)==1]),
sd(df$rt[as.numeric(df$task)==1 & as.numeric(df$congureancy)==2]),
sd(df$rt[as.numeric(df$task)==2 & as.numeric(df$congureancy)==1]),
sd(df$rt[as.numeric(df$task)==2 & as.numeric(df$congureancy)==2]))
means
sds
SDs <- c(
sd(df$rt[as.numeric(df$task)==1 & as.numeric(df$congureancy)==1]),
sd(df$rt[as.numeric(df$task)==1 & as.numeric(df$congureancy)==2]),
sd(df$rt[as.numeric(df$task)==2 & as.numeric(df$congureancy)==1]),
sd(df$rt[as.numeric(df$task)==2 & as.numeric(df$congureancy)==2]))
SDs
as.numeric(df$task)==1 & as.numeric(df$congureancy)==1
groups <- c(
as.numeric(df$task)==1 & as.numeric(df$congureancy)==1,
as.numeric(df$task)==1 & as.numeric(df$congureancy)==2,
as.numeric(df$task)==2 & as.numeric(df$congureancy)==2,
as.numeric(df$task)==2 & as.numeric(df$congureancy)==2
)
groups <- c(
as.numeric(df$task)==1 & as.numeric(df$congureancy)==1,
as.numeric(df$task)==1 & as.numeric(df$congureancy)==2,
as.numeric(df$task)==2 & as.numeric(df$congureancy)==2,
as.numeric(df$task)==2 & as.numeric(df$congureancy)==2
)
means <- c(
mean(df$rt[groups[1]]),
mean(df$rt[groups[2]]),
mean(df$rt[groups[3]]),
mean(df$rt[groups[4]]))
groups <- c(
as.numeric(df$task)==1 & as.numeric(df$congureancy)==1,
as.numeric(df$task)==1 & as.numeric(df$congureancy)==2,
as.numeric(df$task)==2 & as.numeric(df$congureancy)==2,
as.numeric(df$task)==2 & as.numeric(df$congureancy)==2
)
means <- c(
mean(df$rt[groups[1]]),
mean(df$rt[groups[2]]),
mean(df$rt[groups[3]]),
mean(df$rt[groups[4]]))
SDs <- c(
sd(df$rt[groups[1]]),
sd(df$rt[groups[2]]),
sd(df$rt[groups[3]]),
sd(df$rt[groups[4]]))
sd
groups
df<- df|> mutate (groups = c(
as.numeric(df$task)==1 & as.numeric(df$congureancy)==1,
as.numeric(df$task)==1 & as.numeric(df$congureancy)==2,
as.numeric(df$task)==2 & as.numeric(df$congureancy)==2,
as.numeric(df$task)==2 & as.numeric(df$congureancy)==2
)
df<- df|> mutate (groups = c(
df<- df|> mutate (groups = c(
as.numeric(df$task)==1 & as.numeric(df$congureancy)==1,
as.numeric(df$task)==1 & as.numeric(df$congureancy)==2,
as.numeric(df$task)==2 & as.numeric(df$congureancy)==2,
as.numeric(df$task)==2 & as.numeric(df$congureancy)==2
)
)
library(ggpubr)
ggerrorplot(df,  x = "groups",   y = "rt",   color = "groups", shape="groups", desc_stat = "mean_sd",
add = "jitter",  add.params = list(alpha = 0.3), position = position_dodge(1))
groups <- c(
as.numeric(df$task)==1 & as.numeric(df$congureancy)==1,
as.numeric(df$task)==1 & as.numeric(df$congureancy)==2,
as.numeric(df$task)==2 & as.numeric(df$congureancy)==2,
as.numeric(df$task)==2 & as.numeric(df$congureancy)==2
)
means <- c(
mean(df$rt[groups[1]]),
mean(df$rt[groups[2]]),
mean(df$rt[groups[3]]),
mean(df$rt[groups[4]]))
SDs <- c(
sd(df$rt[groups[1]]),
sd(df$rt[groups[2]]),
sd(df$rt[groups[3]]),
sd(df$rt[groups[4]]))
library(ggpubr)
ggerrorplot(df,  x = groups,   y = "rt",   color = "groups", shape="groups", desc_stat = "mean_sd",
add = "jitter",  add.params = list(alpha = 0.3), position = position_dodge(1))
ggerrorplot(df,  x = groups,   y = "rt")
ggerrorplot(df,  x = "group"",   y = "rt")
ggerrorplot(df,  x = "groups",   y = "rt")
ggerrorplot(df,  x = "task",   y = "rt")
df<- df|>mutate(groups = groups)
groups <- c(
as.numeric(df$task)==1 & as.numeric(df$congureancy)==1,
as.numeric(df$task)==1 & as.numeric(df$congureancy)==2,
as.numeric(df$task)==2 & as.numeric(df$congureancy)==2,
as.numeric(df$task)==2 & as.numeric(df$congureancy)==2
)
groups
?ifelse
?ifelse
load('raw_data.rdata')
setwd('HW_7')
load('raw_data.rdata')
df <- df |> mutate(group =
ifelse(grepl("ink", task) & !grepl("in", congureancy),1))
library(tidyverse)
df <- df |> mutate(group =
ifelse(grepl("ink", task) & !grepl("in", congureancy),1))
df <- df |> mutate(group =
if(grepl("ink", task) & !grepl("in", congureancy),1)
df|>group_by(task,congureancy)
A<-df|>group_by(task,congureancy)
View(A)
View(A)
A<-df|>summarize(group_by(task,congureancy))
A<-df|>group_by(task,congureancy)
df <- df |> mutate(group = interaction(task, congureancy))
df
means <- df |> group_by(group)
means
means <- df |> summarize(group_by(group))
means <- df |> as.numeric(group))
means <- as.numeric(df$group)
means
means <- group_by(as.numeric(df$group))
df <- df |> mutate(group = sd.numeric(interaction(task, congureancy)))
df <- df |> mutate(group = as.numeric(interaction(task, congureancy)))
df
means <- df |> group_by(group)
means
means <- df |> summarise(group_by(group))
df |> group_by(group)
df |> select(group_by(group))
means <- df |>
group_by(group) |>
summarize(means = mean(rt))
means
load('filtered_data.rdata')
source("C:/Users/amirm/Dropbox/אוניברסיטת תל אביב/תואר שלישי/סמסטר ג/היכרות עם R/HW_7/HW_7.R", echo=TRUE)
load('filtered_data.rdata')
df <- df |> mutate(group = as.numeric(interaction(task, congureancy)))
library(tidyverse)
df <- df |> mutate(group = as.numeric(interaction(task, congureancy)))
means <- df |>
group_by(group) |>
summarize(means = mean(rt))
means
df <- df |> mutate(group = interaction(task, congureancy))
means <- df |>
group_by(group) |>
summarize(means = mean(rt))
means
load('filtered_data.rdata')
df <- df |> mutate(group = interaction(task, congureancy))
stats <- df |>
group_by(group) |>
summarize(means = mean(rt), SDs = sd(rt))
stats
library(ggpubr)
ggerrorplot(df,  x = "group",   y = "rt",   color = "groups", shape="groups", desc_stat = "mean_sd",
add = "jitter",  add.params = list(alpha = 0.3), position = position_dodge(1)) +
labs(x = 'Memory Score', y = 'Group', title = 'with ggpubr') +
theme_minimal() +
scale_color_manual(values=c("darkred", "skyblue3")) +
theme(axis.ticks.y = element_blank(), axis.text.y = element_blank())
library(ggpubr)
ggerrorplot(df,  x = "group",   y = "rt",   color = "group", shape="group", desc_stat = "mean_sd",
add = "jitter",  add.params = list(alpha = 0.3), position = position_dodge(1)) +
labs(x = 'Memory Score', y = 'Group', title = 'with ggpubr') +
theme_minimal() +
scale_color_manual(values=c("darkred", "skyblue3")) +
theme(axis.ticks.y = element_blank(), axis.text.y = element_blank())
library(ggplot2)
library(ggplot2)
ggplot(df, aes(x = group, y = rt, color = treatment, shape=treatment))
ggplot(df, aes(x = group, y = rt, color = task, shape=task))
ggplot(df, aes(x = group, y = rt, color = task, shape=task)) +
geom_jitter(position = position_jitter(width = 0.15, height = 5), size = 1.5, alpha = 0.3)
ggplot(df, aes(x = group, y = rt, color = task, shape=task)) +
geom_jitter(position = position_jitter(width = 0.15, height = 5), size = 1.5, alpha = 0.3)
ggplot(df, aes(x = group, y = rt, color = task, shape=congureancy)) +
geom_jitter(position = position_jitter(width = 0.15, height = 5), size = 1.5, alpha = 0.3) +
geom_point(data = stats, aes(x = group, y = means, group = group, color = task),
position = position_dodge(1), size = 4) +
geom_errorbar(data = df_summary,aes(x = group, y = means, group = group, ymin = means - SDs, ymax = means + SDs, color = task),
position = position_dodge(1), width = 0.5)
ggplot(df, aes(x = group, y = rt, color = task, shape=congureancy)) +
geom_jitter(position = position_jitter(width = 0.15, height = 5), size = 1.5, alpha = 0.3) +
geom_point(data = stats, aes(x = group, y = means, group = group, color = task),
position = position_dodge(1), size = 4) +
geom_errorbar(data = stats,aes(x = group, y = means, group = group, ymin = means - SDs, ymax = means + SDs, color = task),
position = position_dodge(1), width = 0.5)
ggplot(df, aes(x = group, y = rt, color = task, shape=congureancy)) +
geom_jitter(position = position_jitter(width = 0.15, height = 5), size = 1.5, alpha = 0.3) +
geom_point(data = stats, aes(x = group, y = means, group = group, color = group),
position = position_dodge(1), size = 4) +
geom_errorbar(data = stats,aes(x = group, y = means, group = group, ymin = means - SDs, ymax = means + SDs, color = task),
position = position_dodge(1), width = 0.5)
ggplot(df, aes(x = group, y = rt, color = task, shape=congureancy)) +
geom_jitter(position = position_jitter(width = 0.15, height = 5), size = 1.5, alpha = 0.3) +
geom_point(data = stats, aes(x = group, y = means, group = group, color = group),
position = position_dodge(1), size = 4) +
geom_errorbar(data = stats,aes(x = group, y = means, group = group, ymin = means - SDs, ymax = means + SDs, color = task),
position = position_dodge(1), width = 0.5)
ggplot(df, aes(x = group, y = rt, color = group)) +
geom_jitter(position = position_jitter(width = 0.15, height = 5), size = 1.5, alpha = 0.3) +
geom_point(data = stats, aes(x = group, y = means, group = group, color = group),
position = position_dodge(1), size = 4) +
geom_errorbar(data = stats,aes(x = group, y = means, group = group, ymin = means - SDs, ymax = means + SDs, color = task),
position = position_dodge(1), width = 0.5)
ggplot(df, aes(x = group, y = rt, color = group)) +
geom_jitter(position = position_jitter(width = 0.15, height = 5), size = 1.5, alpha = 0.3) +
geom_point(data = stats, aes(x = group, y = means, group = group, color = group),
position = position_dodge(1), size = 4) +
geom_errorbar(data = stats,aes(x = group, y = means, group = group, ymin = means - SDs, ymax = means + SDs, color = group),
position = position_dodge(1), width = 0.5)
ggplot(df, aes(x = group, y = rt, color = group)) +
geom_jitter(position = position_jitter(width = 0.15, height = 5), size = 1.5, alpha = 0.3) +
geom_point(data = stats, aes(x = group, y = means, group = group),
position = position_dodge(1), size = 4) +
geom_errorbar(data = stats,aes(x = group, y = means, group = group, ymin = means - SDs, ymax = means + SDs, color = group),
position = position_dodge(1), width = 0.5)
ggplot(df, aes(x = group, y = rt, color = group)) +
geom_jitter(position = position_jitter(width = 0.15, height = 5), size = 1.5, alpha = 0.8) +
geom_point(data = stats, aes(x = group, y = means, group = group),
position = position_dodge(1), size = 4) +
geom_errorbar(data = stats,aes(x = group, y = means, group = group, ymin = means - SDs, ymax = means + SDs, color = group),
position = position_dodge(1), width = 0.5)
ggplot(df, aes(x = group, y = rt, color = group)) +
geom_jitter(position = position_jitter(width = 0.15, height = 5), size = 1.5, alpha = 0.1) +
geom_point(data = stats, aes(x = group, y = means, group = group),
position = position_dodge(1), size = 4) +
geom_errorbar(data = stats,aes(x = group, y = means, group = group, ymin = means - SDs, ymax = means + SDs, color = group),
position = position_dodge(1), width = 0.5)
ggplot(df, aes(x = group, y = rt, color = group)) +
geom_jitter(position = position_jitter(width = 0.15, height = 5), size = 1.5, alpha = 0.1) +
geom_point(data = stats, aes(x = group, y = means, group = group),
position = position_dodge(1), size = 4, color = "darkred") +
geom_errorbar(data = stats,aes(x = group, y = means, group = group, ymin = means - SDs, ymax = means + SDs, color = "darkred"),
position = position_dodge(1), width = 0.5) +
labs(x = 'Memory Score', y = 'Group', title = 'with ggplot') +
theme_minimal()  +
theme(axis.ticks.y = element_blank(), axis.text.y = element_blank())
ggplot(df, aes(x = group, y = rt, color = group)) +
geom_jitter(position = position_jitter(width = 0.15, height = 5), size = 1.5, alpha = 0.3) +
geom_point(data = stats, aes(x = group, y = means, group = group),
position = position_dodge(1), size = 4, color = "darkred") +
geom_errorbar(data = stats,aes(x = group, y = means, group = group, ymin = means - SDs, ymax = means + SDs),
position = position_dodge(1), width = 0.5) +
labs(x = 'Ccondition', y = 'RT') +
theme_minimal()  +
theme(axis.ticks.y = element_blank(), axis.text.y = element_blank())
ggplot(df, aes(x = group, y = rt, color = group)) +
geom_jitter(position = position_jitter(width = 0.15, height = 5), size = 1.5, alpha = 0.3) +
geom_point(data = stats, aes(x = group, y = means, group = group),
position = position_dodge(1), size = 4, color = "darkred") +
geom_errorbar(data = stats,aes(x = group, y = means, group = group, ymin = means - SDs, ymax = means + SDs, color = 'darkred'),
position = position_dodge(1), width = 0.5) +
labs(x = 'Ccondition', y = 'RT') +
theme_minimal()  +
theme(axis.ticks.y = element_blank(), axis.text.y = element_blank())
ggplot(df, aes(x = group, y = rt, color = group)) +
geom_jitter(position = position_jitter(width = 0.15, height = 5), size = 1.5, alpha = 0.3) +
geom_point(data = stats, aes(x = group, y = means, group = group),
position = position_dodge(1), size = 4, color = "darkred", shape = 3) +
geom_errorbar(data = stats,aes(x = group, y = means, group = group, ymin = means - SDs, ymax = means + SDs),
position = position_dodge(1), width = 0.5, color = 'darkred') +
labs(x = 'Ccondition', y = 'RT') +
theme_minimal()  +
theme(axis.ticks.y = element_blank(), axis.text.y = element_blank())
ggplot(df, aes(x = group, y = rt, color = group)) +
geom_jitter(position = position_jitter(width = 0.15, height = 5), size = 1.5, alpha = 0.3) +
geom_point(data = stats, aes(x = group, y = means, group = group),
position = position_dodge(1), size = 3, color = "darkred") +
geom_errorbar(data = stats,aes(x = group, y = means, group = group, ymin = means - SDs, ymax = means + SDs),
position = position_dodge(1), width = 0.5, color = 'darkred') +
labs(x = 'Ccondition', y = 'RT') +
theme_minimal()  +
theme(axis.ticks.y = element_blank(), axis.text.y = element_blank())
ggplot(df, aes(x = group, y = rt, color = group)) +
geom_jitter(position = position_jitter(width = 0.15, height = 5), size = 1.5, alpha = 0.3) +
geom_point(data = stats, aes(x = group, y = means, group = group),
position = position_dodge(1), size = 3, color = "darkred") +
geom_errorbar(data = stats,aes(x = group, y = means, group = group, ymin = means - SDs, ymax = means + SDs),
position = position_dodge(1), width = 0.5, color = 'darkred') +
labs(x = 'Condition', y = 'Reaction Time (ms)') +
theme_minimal()  +
theme(axis.ticks.y = element_blank(), axis.text.y = element_blank())
